
-- SQL Injection:
 Cuando ejecutamos una query SQL como Statement tenemos un riesgo de seguridad 
llamado SQL Injection;
 SQL Injection es el hecho de enviar comandos SQL como parámetro de las 
solicitudes en una aplicación.
 Para evitar el fallo por SQL Injection debemos utilizar la interfaz PreparedStatement,
diferente del Statement. El PreparedStatement trata los parámetros del comando SQL 
para que caracteres y comandos especiales sean tratados como strings.


-- conexion.setAutoCommit(false); -> conexion.commit();
  If conexion.setAutoCommit(true) (valor por defecto) then all its SQL statements will be 
	executed and committed as individual transactions. 
 
 Otherwise, its SQL statements are grouped into transactions that are terminated 
 by a call to either the method commit or the method rollback.By default, new 
 connections are in auto-commit mode. 

-- try with resource:
 Las bases de datos ofrecen un recurso llamado transacción, que junta muchas 
operaciones SQL como un conjunto de ejecución. Si el conjunto falla no es aplicada 
ninguna modificación y ocurre el rollback de la transacción.

Todos los comandos del conjunto necesitan funcionar para que la transacción sea 
finalizada con un commit.
Para garantizar el cierre de los recursos abiertos en el código, Java provee un 
recurso llamado try-with-resources para ayudarnos.
Para utilizar este recurso es necesario que la clase utilizada (como Connection()) 
implemente la interfaz Autocloseable.

